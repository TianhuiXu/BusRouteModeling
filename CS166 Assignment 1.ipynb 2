{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "import heapq\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats as sts\n",
    "import random\n",
    "from tqdm import tqdm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "# code adapted from session 3 pre-class work\n",
    "class Event:\n",
    "    '''\n",
    "    Store the properties of one event in the Schedule class defined below. Each\n",
    "    event has a time at which it needs to run, a function to call when running\n",
    "    the event, along with the arguments and keyword arguments to pass to that\n",
    "    function.\n",
    "    '''\n",
    "    def __init__(self, timestamp, function, *args, **kwargs):\n",
    "        self.timestamp = timestamp\n",
    "        self.function = function\n",
    "        self.args = args\n",
    "        self.kwargs = kwargs\n",
    "\n",
    "    def __lt__(self, other):\n",
    "        '''\n",
    "        This overloads the less-than operator in Python. We need it so the\n",
    "        priority queue knows how to compare two events. We want events with\n",
    "        earlier (smaller) times to go first.\n",
    "        '''\n",
    "        return self.timestamp < other.timestamp\n",
    "\n",
    "    def run(self, schedule):\n",
    "        '''\n",
    "        Run an event by calling the function with its arguments and keyword\n",
    "        arguments. The first argument to any event function is always the\n",
    "        schedule in which events are being tracked. The schedule object can be\n",
    "        used to add new events to the priority queue.\n",
    "        '''\n",
    "        self.function(schedule, *self.args, **self.kwargs)\n",
    "\n",
    "\n",
    "class Schedule:\n",
    "    '''\n",
    "    Implement an event schedule using a priority queue. You can add events and\n",
    "    run the next event.\n",
    "    \n",
    "    The `now` attribute contains the time at which the last event was run.\n",
    "    '''\n",
    "    \n",
    "    def __init__(self):\n",
    "        self.now = 0  # Keep track of the current simulation time\n",
    "        self.priority_queue = []  # The priority queue of events to run\n",
    "    \n",
    "    def add_event_at(self, timestamp, function, *args, **kwargs):\n",
    "        # Add an event to the schedule at a particular point in time.\n",
    "        heapq.heappush(\n",
    "            self.priority_queue,\n",
    "            Event(timestamp, function, *args, **kwargs))\n",
    "    \n",
    "    def add_event_after(self, interval, function, *args, **kwargs):\n",
    "        # Add an event to the schedule after a specified time interval.\n",
    "        self.add_event_at(self.now + interval, function, *args, **kwargs)\n",
    "    \n",
    "    def next_event_time(self):\n",
    "        return self.priority_queue[0].timestamp\n",
    "\n",
    "    def run_next_event(self):\n",
    "        # Get the next event from the priority queue and run it.\n",
    "        event = heapq.heappop(self.priority_queue)\n",
    "        self.now = event.timestamp\n",
    "        event.run(self)\n",
    "        \n",
    "    def __repr__(self):\n",
    "        return (\n",
    "            f'Schedule() at time {self.now} ' +\n",
    "            f'with {len(self.priority_queue)} events in the queue')\n",
    "    \n",
    "    def print_events(self):\n",
    "        print(repr(self))\n",
    "        for event in sorted(self.priority_queue):\n",
    "            print(f'   {event.timestamp}: {event.function.__name__}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Passenger:\n",
    "    \"\"\"\n",
    "    The Passenger class stores information about a passenger, to enable calculation of statistics afterwards \n",
    "    and where the passenger needs to get of the bus.\n",
    "    \n",
    "    Properties\n",
    "    ----------\n",
    "    source: int\n",
    "        Index of the bus stop at which the passenger enters the system.\n",
    "    dest: int\n",
    "        Index of the bus stop at which the passenger leaves the system.\n",
    "    time_waited_for_bus: float\n",
    "        Time between the moment the passenger enters the system and the moment\n",
    "        a bus with places left arrives at the stop.\n",
    "    start_time: float\n",
    "        Time at which the passenger arrives at her source bus stop.\n",
    "    end_time: float\n",
    "        Time at which the passenger hops out of the bus.\n",
    "        \n",
    "    Methods\n",
    "    ----------\n",
    "    hop_off: calculates the total time the passenger spent in the system\n",
    "    \"\"\"\n",
    "    def __init__(self, source=None, dest=None, start_time=0):\n",
    "        self.source = source\n",
    "        self.dest = dest\n",
    "        self.time_waited_for_bus = None\n",
    "        self.start_time = start_time\n",
    "        self.end_time = None\n",
    "        \n",
    "    def hop_off(self, schedule):\n",
    "        self.end_time = schedule.now\n",
    "        #print(f'{schedule.now:5.2f}: Passenger hopped off bus. Destination is {self.dest}')\n",
    "        return self.end_time - self.start_time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Queue:\n",
    "    \"\"\"\n",
    "    The Queue class stores information about a queue at a bus stop and keeps track of the passengers currently in\n",
    "    the queue. \n",
    "    \n",
    "    Properties\n",
    "    ----------\n",
    "    stop_idx: int\n",
    "        Index of the bus stop.\n",
    "    passengers: list\n",
    "        List of passengers at a bus stop.\n",
    "    arrival_distribution: distribution\n",
    "        Distribution that arriving at the system follows.\n",
    "    stops: list\n",
    "        List of stop index in the system.\n",
    "        \n",
    "    Methods\n",
    "    ----------\n",
    "    add_customer: Add a new customer to the queue\n",
    "    hop_in_bus: When a bus arrives, hop in all the passengers that would fit in the bus\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self, stop_idx):\n",
    "        self.stop_idx = stop_idx\n",
    "        # We start with an empty queue and the server not busy\n",
    "        self.people_in_queue = 0\n",
    "        self.passengers = []\n",
    "        self.arrival_distribution = sts.expon(scale=1)\n",
    "        self.stops = np.roll([i for i in range(15)], 15 - stop_idx)\n",
    "\n",
    "    def add_customer(self, schedule):\n",
    "        # Add the customer to the queue\n",
    "        # Append the customer to the customer list at the queue\n",
    "        self.passengers.append(Passenger(source=self.stop_idx, dest=self.stops[random.randint(1, 7)], start_time = schedule.now))\n",
    "        self.people_in_queue += 1\n",
    "        #print(\n",
    "            #f'{schedule.now:5.2f}: Add customer to queue {self.stop_idx}.  '\n",
    "            #f'Queue length: {len(self.passengers)}')\n",
    "        #schedule.add_event_after(self.arrival_distribution.rvs(), self.add_customer)\n",
    "        \n",
    "    def hop_in_bus(self, schedule, bus):\n",
    "        # when a bus arrives, all the passengers that would fit in the bus hop in, the others stay in the queue\n",
    "        num_to_hop_in = min(bus.num_free_space(), len(self.passengers))\n",
    "        if num_to_hop_in == 0:\n",
    "            return 0, []\n",
    "        hop_in_time = sts.norm(0.05*num_to_hop_in, 0.01*np.sqrt(num_to_hop_in)).rvs() / num_to_hop_in\n",
    "        waiting_times = []\n",
    "        for i in range(num_to_hop_in):\n",
    "            passenger = self.passengers.pop(0)\n",
    "            # calculate the time waited\n",
    "            passenger.time_waited_for_bus = schedule.now - passenger.start_time + hop_in_time * i\n",
    "            waiting_times.append(passenger.time_waited_for_bus)\n",
    "            # schedule the hopping in on the bus\n",
    "            schedule.add_event_after(hop_in_time * i, bus.hop_in_pass, passenger)\n",
    "        return hop_in_time * num_to_hop_in, waiting_times"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Bus:\n",
    "    \"\"\"\n",
    "    The Bus class stores information about a bus that runs in the system. \n",
    "    \n",
    "    Properties\n",
    "    ----------\n",
    "    index: int\n",
    "        Index of the bus.\n",
    "    next_stop: int\n",
    "        Index of the next stop the bus is travelling to.\n",
    "    passengers: list\n",
    "        List of passengers on the bus.\n",
    "    capacity: int\n",
    "        Capacity of the bus\n",
    "    travel_time_dis: distribution\n",
    "        Distribution where the travelling time between consecutive bus stops come from.\n",
    "        \n",
    "    Methods\n",
    "    ----------\n",
    "    num_free_space: Calculate the number of free space on the bus\n",
    "    hop_in_pass: add passenger to the bus\n",
    "    hop_off_pass: remove passenger from the bus if meets the destination\n",
    "    travel_time: generate travel time from the distribution\n",
    "    \"\"\"\n",
    "    def __init__(self, index, next_stop):\n",
    "        self.index = index\n",
    "        self.next_stop = next_stop\n",
    "        self.passengers = []\n",
    "        self.capacity = 130\n",
    "        self.travel_time_dist = sts.norm(2, 0.5)\n",
    "        \n",
    "    def num_free_space(self):\n",
    "        return (self.capacity - len(self.passengers))\n",
    "    \n",
    "    def hop_in_pass(self, schedule, passenger):\n",
    "        #print(f'{schedule.now:5.2f}: Passenger hopped in on bus {self.index}')\n",
    "        \"\"\"Move ``passengers`` inside the bus.  ``passengers`` can be a single\n",
    "        passenger or a list of passengers.\"\"\"\n",
    "        self.passengers.append(passenger)\n",
    "        \n",
    "    def hop_off_pass(self, schedule, stop_index):\n",
    "        out_passengers = [passenger for passenger in self.passengers\n",
    "                          if passenger.dest == stop_index]\n",
    "        if out_passengers == []:\n",
    "            return 0, []\n",
    "        \n",
    "        t = 0.0\n",
    "        num_to_hop_off = len(out_passengers)\n",
    "        hop_off_time = sts.norm(0.03*num_to_hop_off, 0.01*np.sqrt(num_to_hop_off)).rvs() / num_to_hop_off\n",
    "            \n",
    "        for i in range(num_to_hop_off):\n",
    "            passenger = out_passengers[i]\n",
    "            schedule.add_event_after(hop_off_time * (i+1), passenger.hop_off)\n",
    "            self.passengers.remove(passenger)\n",
    "        \n",
    "        return hop_off_time * num_to_hop_off, out_passengers\n",
    "    \n",
    "    def travel_time(self):\n",
    "        return travel_time_dist.rvs()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "class BusSystem:\n",
    "    \"\"\"\n",
    "    The Bus system class stores information about the entire system. \n",
    "    \n",
    "    Properties\n",
    "    ----------\n",
    "    queues: int\n",
    "        Store the queues in the system.\n",
    "    stop_num: int\n",
    "        Number of bus stops in the system.\n",
    "    arrival_distribution: dist\n",
    "        Distribution where the arrival time of the passenger comes from.\n",
    "    bus_num: int\n",
    "        Number of buses in the system\n",
    "    buses: list\n",
    "        List of buses in the system\n",
    "    waiting_times: list\n",
    "        List of waiting times of passengers that finished the process\n",
    "    max_queue_len: int\n",
    "        Keeps track of the maximum queue length\n",
    "        \n",
    "    Methods\n",
    "    ----------\n",
    "    add_customer: add customer to the queue and schedule new arrival\n",
    "    bus_arrive: triggers hopping off and schedules hopping in\n",
    "    finish_hopping_in: schedules arrival at next bus stop\n",
    "    run: initalize the system, schedule the arrival of first passenger at each queue and bus arrival at stops\n",
    "    \"\"\"\n",
    "    def __init__(self, arrival_distribution, hop_in_distribution, hop_out_distribution, bus_num, stop_num):\n",
    "        # initialize the assigned number of queues\n",
    "        self.queues = []\n",
    "        # initialize queues for the system\n",
    "        self.stop_num = stop_num\n",
    "        for i in range(stop_num):\n",
    "            self.queues.append(Queue(stop_idx = i))\n",
    "        self.arrival_distribution = arrival_distribution\n",
    "        \n",
    "        self.bus_num = bus_num\n",
    "        self.buses = []\n",
    "        for i in range(bus_num):\n",
    "            self.buses.append(Bus(i, random.randint(0, 14)))\n",
    "            \n",
    "        self.waiting_times = []\n",
    "        # track the maximum queue length at all the bus stops\n",
    "        self.max_queue_len = 0\n",
    "            \n",
    "\n",
    "    def add_customer(self, schedule, queue):\n",
    "        # Add this customer to the queue chosen\n",
    "        queue.add_customer(schedule)\n",
    "        self.max_queue_len = max(len(queue.passengers), self.max_queue_len)\n",
    "        # Schedule when to add another customer\n",
    "        schedule.add_event_after(\n",
    "            self.arrival_distribution.rvs(),\n",
    "            self.add_customer, **{'queue':queue})\n",
    "    \n",
    "    #def arrive_at_stop(self, schedule, stop_idx):\n",
    "        \n",
    "    \n",
    "    def bus_arrive(self, schedule, bus, stop_idx):\n",
    "        #bus.arrive_at_stop(schedule, stop_idx)\n",
    "        curr_queue = self.queues[stop_idx]\n",
    "        \n",
    "        hop_off_time = bus.hop_off_pass(schedule, stop_idx)\n",
    "        hop_in_time, waiting_times = curr_queue.hop_in_bus(schedule, bus)\n",
    "        schedule.add_event_after(hop_in_time, self.finish_hopping_in, **{'bus':bus, 'stop_idx':stop_idx})\n",
    "        self.waiting_times.extend(waiting_times)\n",
    "    \n",
    "    def finish_hopping_in(self, schedule, bus, stop_idx):\n",
    "        #print(f'{schedule.now:5.2f}: Stop {stop_idx} passengers finished hopping on Bus {bus.index}. {len(bus.passengers)} people on the bus.')\n",
    "        if bus.next_stop < self.stop_num - 1:\n",
    "            bus.next_stop = stop_idx + 1\n",
    "        else:\n",
    "            bus.next_stop = 0\n",
    "        schedule.add_event_after(\n",
    "            bus.travel_time_dist.rvs(),\n",
    "            self.bus_arrive, bus, bus.next_stop)\n",
    "\n",
    "    def run(self, schedule):\n",
    "        # Schedule when the first customer arrives for each queue\n",
    "        for i in range(self.stop_num):\n",
    "            schedule.add_event_after(self.arrival_distribution.rvs(), self.add_customer, **{'queue':self.queues[i]})\n",
    "        for i in range(self.bus_num):\n",
    "            schedule.add_event_after(1, self.bus_arrive, **{'bus':self.buses[i], 'stop_idx':self.buses[i].next_stop})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_simulation(arrival_distribution, hop_in_distribution, hop_out_distribution, bus_num, stop_num, run_until):\n",
    "    schedule = Schedule()\n",
    "    bus_system = BusSystem(arrival_distribution, hop_in_distribution, hop_out_distribution, bus_num, stop_num)\n",
    "    bus_system.run(schedule)\n",
    "    while schedule.next_event_time() < run_until:\n",
    "        schedule.run_next_event()\n",
    "    return bus_system"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Exponential with lambda = 1\n",
    "arrival_distribution = sts.expon(scale=1)\n",
    "\n",
    "def hop_in_distribution(n):\n",
    "    return sts.norm(n*0.03, 0.01*sqrt(n))\n",
    "\n",
    "def hop_out_distribution(n):\n",
    "    return sts.norm(n*0.05, 0.01*sqrt(n))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.149419816480148"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sts.expon(scale=1).rvs()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 0.03: Add customer to queue 9.  Queue length: 1\n",
      " 0.07: Add customer to queue 5.  Queue length: 1\n",
      " 0.09: Add customer to queue 0.  Queue length: 1\n",
      " 0.18: Add customer to queue 7.  Queue length: 1\n",
      " 0.20: Add customer to queue 10.  Queue length: 1\n",
      " 0.34: Add customer to queue 14.  Queue length: 1\n",
      " 0.39: Add customer to queue 12.  Queue length: 1\n",
      " 0.48: Add customer to queue 3.  Queue length: 1\n",
      " 0.62: Add customer to queue 8.  Queue length: 1\n",
      " 0.69: Add customer to queue 13.  Queue length: 1\n",
      " 0.78: Add customer to queue 10.  Queue length: 2\n",
      " 0.80: Add customer to queue 0.  Queue length: 2\n",
      " 0.95: Add customer to queue 9.  Queue length: 2\n",
      " 0.99: Add customer to queue 1.  Queue length: 1\n",
      " 1.00: Passenger hopped in on bus 1\n",
      " 1.00: Stop 5 passengers finished hopping on Bus 0. 0 people on the bus.\n",
      " 1.06: Stop 5 passengers finished hopping on Bus 1. 1 people on the bus.\n",
      " 1.07: Add customer to queue 0.  Queue length: 3\n",
      " 1.12: Add customer to queue 5.  Queue length: 1\n",
      " 1.19: Add customer to queue 1.  Queue length: 2\n",
      " 1.39: Add customer to queue 9.  Queue length: 3\n",
      " 1.48: Add customer to queue 4.  Queue length: 1\n",
      " 1.55: Add customer to queue 3.  Queue length: 2\n",
      " 1.56: Add customer to queue 5.  Queue length: 2\n",
      " 1.61: Add customer to queue 7.  Queue length: 2\n",
      " 1.64: Add customer to queue 12.  Queue length: 2\n",
      " 1.81: Add customer to queue 3.  Queue length: 3\n",
      " 1.96: Add customer to queue 0.  Queue length: 4\n",
      " 1.99: Add customer to queue 3.  Queue length: 4\n",
      " 2.00: Add customer to queue 14.  Queue length: 2\n",
      " 2.02: Add customer to queue 5.  Queue length: 3\n",
      " 2.04: Add customer to queue 13.  Queue length: 2\n",
      " 2.05: Add customer to queue 6.  Queue length: 1\n",
      " 2.08: Add customer to queue 13.  Queue length: 3\n",
      " 2.14: Add customer to queue 5.  Queue length: 4\n",
      " 2.27: Add customer to queue 1.  Queue length: 3\n",
      " 2.35: Add customer to queue 14.  Queue length: 3\n",
      " 2.41: Passenger hopped in on bus 0\n",
      " 2.45: Stop 6 passengers finished hopping on Bus 0. 1 people on the bus.\n",
      " 2.48: Add customer to queue 3.  Queue length: 5\n",
      " 2.59: Add customer to queue 11.  Queue length: 1\n",
      " 2.63: Add customer to queue 9.  Queue length: 4\n",
      " 2.65: Add customer to queue 0.  Queue length: 5\n",
      " 2.73: Add customer to queue 0.  Queue length: 6\n",
      " 2.76: Add customer to queue 2.  Queue length: 1\n",
      " 2.85: Add customer to queue 1.  Queue length: 4\n",
      " 2.86: Add customer to queue 3.  Queue length: 6\n",
      " 2.94: Add customer to queue 0.  Queue length: 7\n",
      " 2.95: Add customer to queue 10.  Queue length: 3\n",
      " 2.95: Add customer to queue 3.  Queue length: 7\n",
      " 3.02: Add customer to queue 14.  Queue length: 4\n",
      " 3.02: Add customer to queue 14.  Queue length: 5\n",
      " 3.12: Add customer to queue 12.  Queue length: 3\n",
      " 3.17: Stop 6 passengers finished hopping on Bus 1. 1 people on the bus.\n",
      " 3.20: Add customer to queue 1.  Queue length: 5\n",
      " 3.36: Add customer to queue 9.  Queue length: 5\n",
      " 3.40: Add customer to queue 7.  Queue length: 3\n",
      " 3.45: Add customer to queue 2.  Queue length: 2\n",
      " 3.55: Add customer to queue 4.  Queue length: 2\n",
      " 3.68: Add customer to queue 0.  Queue length: 8\n",
      " 3.75: Add customer to queue 4.  Queue length: 3\n",
      " 3.81: Add customer to queue 3.  Queue length: 8\n",
      " 3.82: Add customer to queue 3.  Queue length: 9\n",
      " 3.91: Add customer to queue 4.  Queue length: 4\n",
      " 4.01: Add customer to queue 10.  Queue length: 4\n",
      " 4.02: Add customer to queue 5.  Queue length: 5\n",
      " 4.04: Add customer to queue 9.  Queue length: 6\n",
      " 4.13: Add customer to queue 5.  Queue length: 6\n",
      " 4.15: Add customer to queue 1.  Queue length: 6\n",
      " 4.15: Add customer to queue 5.  Queue length: 7\n",
      " 4.27: Passenger hopped in on bus 0\n",
      " 4.30: Passenger hopped off bus. Destination is 7\n",
      " 4.32: Passenger hopped in on bus 0\n",
      " 4.37: Passenger hopped in on bus 0\n",
      " 4.37: Add customer to queue 6.  Queue length: 1\n",
      " 4.41: Stop 7 passengers finished hopping on Bus 0. 3 people on the bus.\n",
      " 4.43: Add customer to queue 11.  Queue length: 2\n",
      " 4.44: Add customer to queue 12.  Queue length: 4\n",
      " 4.45: Add customer to queue 13.  Queue length: 4\n",
      " 4.55: Add customer to queue 6.  Queue length: 2\n",
      " 4.75: Add customer to queue 11.  Queue length: 3\n",
      " 4.95: Add customer to queue 5.  Queue length: 8\n",
      " 4.97: Add customer to queue 5.  Queue length: 9\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "# test out the system to see whether it meets expectation\n",
    "duration = 5\n",
    "bus_num = 2\n",
    "stop_num = 15\n",
    "start = time.time()\n",
    "bus_system = run_simulation(arrival_distribution, hop_in_distribution, hop_out_distribution, bus_num, stop_num, duration)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|████████████████████████████████████████| 18/18 [2:01:39<00:00, 405.53s/it]\n"
     ]
    }
   ],
   "source": [
    "duration = 24 * 60\n",
    "stop_num = 15\n",
    "x = [i for i in range(2,20)]\n",
    "y = []\n",
    "y_err = []\n",
    "y2 = []\n",
    "y2_err = []\n",
    "y3 = []\n",
    "y3_err = []\n",
    "for bus_num in tqdm(range(2,20)):\n",
    "    max_queue_len = []\n",
    "    waiting_times = []\n",
    "    mean_queue_len = []\n",
    "    for num_experiment in range(0,50):\n",
    "        bus_system = run_simulation(arrival_distribution, hop_in_distribution, hop_out_distribution, bus_num, stop_num, duration)\n",
    "        max_queue_len.append(bus_system.max_queue_len)\n",
    "        waiting_times.append(np.mean(bus_system.waiting_times))\n",
    "        mean_queue_len.append(np.mean([len(i.passengers) for i in bus_system.queues]))\n",
    "    y.append(np.mean(max_queue_len))\n",
    "    y_err.append(sts.sem(max_queue_len) * 1.96)\n",
    "    y2.append(np.mean(waiting_times))\n",
    "    y2_err.append(sts.sem(waiting_times) * 1.96)\n",
    "    y3.append(np.mean(mean_queue_len))\n",
    "    y3_err.append(sts.sem(mean_queue_len) * 1.96)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(16, 6))\n",
    "plt.xlabel('Number of buses')\n",
    "plt.ylabel('Mean Queue Length')\n",
    "plt.errorbar(x, y3, y3_err,color='black', marker='o', capsize=5, linestyle='--', linewidth=1)\n",
    "plt.title('Mean and 95% CI Queue length with Varying Bus Numbers after a Day')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number of buses</th>\n",
       "      <th>Maximum queue length</th>\n",
       "      <th>95% CI</th>\n",
       "      <th>Mean queue length</th>\n",
       "      <th>95% CI</th>\n",
       "      <th>Mean waiting time</th>\n",
       "      <th>95% CI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>69.60</td>\n",
       "      <td>[68.91, 70.29]</td>\n",
       "      <td>22.82</td>\n",
       "      <td>[22.21, 23.43]</td>\n",
       "      <td>23.43</td>\n",
       "      <td>[23.31, 23.55]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>59.40</td>\n",
       "      <td>[58.51, 60.29]</td>\n",
       "      <td>18.32</td>\n",
       "      <td>[17.91, 18.73]</td>\n",
       "      <td>18.92</td>\n",
       "      <td>[18.82, 19.02]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>54.78</td>\n",
       "      <td>[54.14, 55.42]</td>\n",
       "      <td>16.91</td>\n",
       "      <td>[16.54, 17.28]</td>\n",
       "      <td>16.91</td>\n",
       "      <td>[16.8, 17.03]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5</td>\n",
       "      <td>52.76</td>\n",
       "      <td>[52.21, 53.31]</td>\n",
       "      <td>15.48</td>\n",
       "      <td>[15.13, 15.82]</td>\n",
       "      <td>15.62</td>\n",
       "      <td>[15.49, 15.76]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "      <td>51.26</td>\n",
       "      <td>[50.41, 52.11]</td>\n",
       "      <td>14.80</td>\n",
       "      <td>[14.36, 15.24]</td>\n",
       "      <td>14.58</td>\n",
       "      <td>[14.42, 14.74]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>7</td>\n",
       "      <td>49.64</td>\n",
       "      <td>[48.87, 50.41]</td>\n",
       "      <td>14.33</td>\n",
       "      <td>[13.93, 14.73]</td>\n",
       "      <td>13.55</td>\n",
       "      <td>[13.33, 13.76]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>8</td>\n",
       "      <td>48.04</td>\n",
       "      <td>[47.32, 48.76]</td>\n",
       "      <td>13.22</td>\n",
       "      <td>[12.7, 13.75]</td>\n",
       "      <td>12.65</td>\n",
       "      <td>[12.43, 12.88]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>9</td>\n",
       "      <td>47.00</td>\n",
       "      <td>[46.22, 47.78]</td>\n",
       "      <td>12.52</td>\n",
       "      <td>[11.88, 13.16]</td>\n",
       "      <td>11.27</td>\n",
       "      <td>[10.9, 11.64]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>10</td>\n",
       "      <td>45.84</td>\n",
       "      <td>[45.13, 46.55]</td>\n",
       "      <td>11.41</td>\n",
       "      <td>[10.7, 12.12]</td>\n",
       "      <td>10.51</td>\n",
       "      <td>[10.14, 10.88]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>11</td>\n",
       "      <td>44.04</td>\n",
       "      <td>[43.14, 44.94]</td>\n",
       "      <td>10.21</td>\n",
       "      <td>[9.34, 11.08]</td>\n",
       "      <td>8.93</td>\n",
       "      <td>[8.52, 9.35]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>12</td>\n",
       "      <td>41.76</td>\n",
       "      <td>[40.76, 42.76]</td>\n",
       "      <td>8.70</td>\n",
       "      <td>[7.84, 9.57]</td>\n",
       "      <td>8.12</td>\n",
       "      <td>[7.76, 8.47]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>13</td>\n",
       "      <td>40.82</td>\n",
       "      <td>[39.58, 42.06]</td>\n",
       "      <td>8.69</td>\n",
       "      <td>[7.89, 9.49]</td>\n",
       "      <td>7.33</td>\n",
       "      <td>[6.9, 7.76]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>14</td>\n",
       "      <td>38.40</td>\n",
       "      <td>[37.15, 39.65]</td>\n",
       "      <td>7.08</td>\n",
       "      <td>[6.31, 7.86]</td>\n",
       "      <td>6.19</td>\n",
       "      <td>[5.87, 6.51]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>15</td>\n",
       "      <td>35.60</td>\n",
       "      <td>[34.2, 37.0]</td>\n",
       "      <td>6.64</td>\n",
       "      <td>[5.87, 7.4]</td>\n",
       "      <td>5.30</td>\n",
       "      <td>[4.95, 5.65]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>16</td>\n",
       "      <td>35.12</td>\n",
       "      <td>[33.74, 36.5]</td>\n",
       "      <td>5.86</td>\n",
       "      <td>[5.24, 6.47]</td>\n",
       "      <td>5.04</td>\n",
       "      <td>[4.71, 5.37]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>17</td>\n",
       "      <td>32.90</td>\n",
       "      <td>[31.31, 34.49]</td>\n",
       "      <td>4.93</td>\n",
       "      <td>[4.3, 5.56]</td>\n",
       "      <td>4.32</td>\n",
       "      <td>[4.02, 4.63]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>18</td>\n",
       "      <td>31.38</td>\n",
       "      <td>[30.08, 32.68]</td>\n",
       "      <td>4.39</td>\n",
       "      <td>[3.84, 4.95]</td>\n",
       "      <td>3.97</td>\n",
       "      <td>[3.7, 4.23]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>19</td>\n",
       "      <td>29.62</td>\n",
       "      <td>[28.12, 31.12]</td>\n",
       "      <td>3.49</td>\n",
       "      <td>[3.02, 3.96]</td>\n",
       "      <td>3.61</td>\n",
       "      <td>[3.25, 3.97]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Number of buses  Maximum queue length          95% CI  Mean queue length  \\\n",
       "0                 2                 69.60  [68.91, 70.29]              22.82   \n",
       "1                 3                 59.40  [58.51, 60.29]              18.32   \n",
       "2                 4                 54.78  [54.14, 55.42]              16.91   \n",
       "3                 5                 52.76  [52.21, 53.31]              15.48   \n",
       "4                 6                 51.26  [50.41, 52.11]              14.80   \n",
       "5                 7                 49.64  [48.87, 50.41]              14.33   \n",
       "6                 8                 48.04  [47.32, 48.76]              13.22   \n",
       "7                 9                 47.00  [46.22, 47.78]              12.52   \n",
       "8                10                 45.84  [45.13, 46.55]              11.41   \n",
       "9                11                 44.04  [43.14, 44.94]              10.21   \n",
       "10               12                 41.76  [40.76, 42.76]               8.70   \n",
       "11               13                 40.82  [39.58, 42.06]               8.69   \n",
       "12               14                 38.40  [37.15, 39.65]               7.08   \n",
       "13               15                 35.60    [34.2, 37.0]               6.64   \n",
       "14               16                 35.12   [33.74, 36.5]               5.86   \n",
       "15               17                 32.90  [31.31, 34.49]               4.93   \n",
       "16               18                 31.38  [30.08, 32.68]               4.39   \n",
       "17               19                 29.62  [28.12, 31.12]               3.49   \n",
       "\n",
       "           95% CI   Mean waiting time        95% CI    \n",
       "0   [22.21, 23.43]              23.43  [23.31, 23.55]  \n",
       "1   [17.91, 18.73]              18.92  [18.82, 19.02]  \n",
       "2   [16.54, 17.28]              16.91   [16.8, 17.03]  \n",
       "3   [15.13, 15.82]              15.62  [15.49, 15.76]  \n",
       "4   [14.36, 15.24]              14.58  [14.42, 14.74]  \n",
       "5   [13.93, 14.73]              13.55  [13.33, 13.76]  \n",
       "6    [12.7, 13.75]              12.65  [12.43, 12.88]  \n",
       "7   [11.88, 13.16]              11.27   [10.9, 11.64]  \n",
       "8    [10.7, 12.12]              10.51  [10.14, 10.88]  \n",
       "9    [9.34, 11.08]               8.93    [8.52, 9.35]  \n",
       "10    [7.84, 9.57]               8.12    [7.76, 8.47]  \n",
       "11    [7.89, 9.49]               7.33     [6.9, 7.76]  \n",
       "12    [6.31, 7.86]               6.19    [5.87, 6.51]  \n",
       "13     [5.87, 7.4]               5.30    [4.95, 5.65]  \n",
       "14    [5.24, 6.47]               5.04    [4.71, 5.37]  \n",
       "15     [4.3, 5.56]               4.32    [4.02, 4.63]  \n",
       "16    [3.84, 4.95]               3.97     [3.7, 4.23]  \n",
       "17    [3.02, 3.96]               3.61    [3.25, 3.97]  "
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y2_ci = [[round(y2[i] - y2_err[i], 2), round(y2[i] + y2_err[i], 2)] for i in range(18)]\n",
    "y_ci = [[round(y[i] - y_err[i], 2), round(y[i] + y_err[i], 2)] for i in range(18)]\n",
    "y3_ci = [[round(y3[i] - y3_err[i], 2), round(y3[i] + y3_err[i], 2)] for i in range(18)]\n",
    "df = pd.DataFrame(\n",
    "    {'Number of buses': x,  'Maximum queue length': y, '95% CI': y_ci, 'Mean queue length': np.round(y3, 2), \n",
    "     '95% CI ': y3_ci, 'Mean waiting time': np.round(y2, 2), '95% CI  ': y2_ci})\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(16, 6))\n",
    "plt.xlabel('Number of buses')\n",
    "plt.ylabel('Maximum Queue Length')\n",
    "plt.errorbar(x, y, y_err,color='black', marker='o', capsize=5, linestyle='--', linewidth=1)\n",
    "plt.title('Mean and 95% CI Maximum Queue length with Varying Bus Numbers after a Day')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(16, 6))\n",
    "plt.xlabel('Number of buses')\n",
    "plt.ylabel('Mean Waiting Time')\n",
    "plt.errorbar(x, y2, y2_err,color='black', marker='o', capsize=5, linestyle='--', linewidth=1)\n",
    "plt.title('Mean and 95% CI Mean Waiting Time with Varying Bus Numbers after a Day')\n",
    "plt.axhline(5)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(16, 6))\n",
    "plt.xlabel('Number of buses')\n",
    "plt.ylabel('Mean Waiting Time')\n",
    "plt.errorbar(x[1:], y2[1:], y2_err[1:],color='black', marker='o', capsize=5, linestyle='--', linewidth=1)\n",
    "plt.title('Mean and 95% CI Mean Waiting Time with Varying Bus Numbers after a Day')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "def theoretical_mg1(rho, sigma, tau):\n",
    "    return rho**2 / 2 / (1-rho) * (1 + sigma**2 / tau**2)\n",
    "\n",
    "y_the = []\n",
    "for num_bus in range(2,20):\n",
    "    arrival_rate = 1\n",
    "    tau = 30 / (num_bus * 20)\n",
    "    sigma = 3\n",
    "    rho =  arrival_rate * tau\n",
    "    y_the.append(theoretical_mg1(rho, sigma, tau))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(16, 6))\n",
    "plt.title(f'Average queue length / Waiting Time for an queue (comparison of theoretical and empirical)')\n",
    "plt.xlabel('Number of Buses')\n",
    "plt.ylabel('Average queue length / Waiting Time')\n",
    "\n",
    "plt.plot(\n",
    "    x, y_the, \n",
    "    color='red', marker='o', linestyle='--', linewidth=1,\n",
    "    label='theoretical')\n",
    "plt.errorbar(x, y2, y2_err,color='black', \n",
    "             marker='o', capsize=5, linestyle='--', linewidth=1, \n",
    "            label='empirical')\n",
    "\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
